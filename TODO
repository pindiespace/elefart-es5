TODO LIST:

1. Define objects in a hierarchy using prototype or prototype-like methods

   -Shape->ScreenObject->instance

2. Define getters in a more rational way

3. Constrain all positions and sizes to integer values

4. Expand drawing so some objects are rendered, and the resulting image is 
   scrolled. This also requires a bettery method for generating layers.

5. Define layers, and canvas in a better way
   -layers are within a canvas
   -ability to assemble some layers as scrolling image, some as dynamic redraws

6. Generic child list not as good as segrated list - make specific typed listes, 
   rather than putting everything into a single child list.

7. Define an erase() function so objects can be erased without re-drawing the whole 
   screen

8. AddTo and RemoveFrom a queue should be generic, since it is used extensively

9. Need planning about what is network, global, local variables

10. Core Object
Shape->ScreenObject

11. Drawing functions should be attached to object, with common name, instead of a 
   decision tree. Erase function should be paired (will need it in customdraw as well)

12. Better draw() planning to avoid drawRects() function

13. update(), draw(), erase() should all be local (and have access to local context)

14. An "eraseRect" should be defined for all objects, including custom drawing. It would 
    be the rect enclosing regular and custom drawing. Compositing seems to leave a bit of 
    residue behind.

    If the Stroke is not part of the rect, the eraseRect needs to be expanded to include it

15. Basic create functions need to assign parent before the object is added to display or 
    update lists

16. Do getCenter() between two points to see if a floor lies in an ElevatorShaft. If you use 
    edges, slight cosmetic shifts of BuildingFloors relative to ElevatorShafts might result 
    in a BuildingFloor not being included in the ElevatorShaft list

17. factory.getCenter() between any two Points or lines

18. Sprite objects need definition as a type (e.g. ScreenImage extension?)

19. Should use a GRID for rows and cols - that way, we can test grid for occupancy for 
    goodie or people

20. Define dependent objects. Make the things they depend on first. Building complete, then add 
    elements to building. Use building.getterXX() to access everything.

21. object.name should be object.type, with instanceName the same.

22. Utility for scanning an image board defined in a JS object, getting row or col of the 
    image shown, then assigning it. In fact, we need an image object spriteboard that dynamically 
    loads additional information about each sprite in the spriteboard.

23. Additional character groups
	The Royals: Lord Ripistich, Lady BlasterSeams
	German: Herr GegensTuts, Herr BlattKampfen

24. Need some "global" functions, e.g. "getBuilding", "getShafts", "getFloors" to avoid having to 
    derive a Building object constantly.

25. Need default sprite animation system. Move sprite, and change sprite image based on time. Implies
    an object with increments per time, and animation frames per time interval.

26. Use LineWidth for strokeWidth to match HTML5 canvas

27. Each object needs to control its own update speed, or a subset should have a special variable
    so they update independently of the rest of the panel

28. OBJECTS SHOULD BE "HOOKED UP" independent of their being initialized. In other words, object 
    tree should be assembled, then the whole tree asked to "init"



